name                = Daemon-Control
abstract            = Create init scripts and daemonize applications
author              = SymKat <symkat@cpan.org>
license             = Perl_5
copyright_holder    = SymKat
;
; use V= to override; otherwise version is incremented from last tag
[Git::NextVersion]              ; uses last git tag to determine next version number

[Prereqs / RuntimeRequires]
POSIX = 0
File::Spec = 0
perl = 5.008001

[Prereqs / TestRequires]
Test::More = 0

[@Filter]                       ; use [@Basic]
-bundle = @Basic                ; (see Dist::Zilla::PluginBundle::Basic)
-remove = GatherDir             ; ...except remove [GatherDir]
-remove = Readme                ; ...and [Readme]

[Git::GatherDir]                ; instead of releasing everything, only include
                                ; filed tracked by git (no local todo files!)

[ReadmeFromPod]                 ; generates a README from POD in the main module

[NextRelease]                   ; edits version number, date and user into Changes
:version = 4.300018
format = %-8V  %{yyyy-MM-dd HH:mm:ss ZZZZ}d (%U)

[GithubMeta]                    ; inserts repository information automatically, from remote spec

[InstallGuide]                  ; creates an INSTALL file
[MetaConfig]                    ; summarize dzil configuration into distmeta
[MetaJSON]                      ; also create a META.json file

[Git::Describe]                 ; inserts 'git describe --long' output into all files
[PkgVersion]                    ; inserts $VERSION into all files

[Test::Compile]                 ; tests that everything compiles
[Test::CheckDeps]               ; tests that dependencies are satisfied
:version = 0.005
fatal = 1

[NoTabsTests]                   ; release tests for tabs
[EOLTests]                      ; release tests for bad \n
[Test::MinimumVersion]          ; release tests for minimum required versions
[MetaTests]                     ; release tests for META.yml
[Test::CPAN::Changes]           ; release tests for changelog formatting
[Test::Version]                 ; release tests for version number
; [Test::UnusedVars]              ; release tests for unused variables (broken in 5.16.0)
[Test::ChangesHasContent]       ; release tests for changelog content

[PodSyntaxTests]                ; release tests for POD syntax
[PodCoverageTests]              ; release tests for POD coverage
[Test::PodSpelling]             ; release tests for POD spelling
stopwords = LSB
stopwords = color
stopwords = daemonizing
stopwords = doherty
stopwords = mst
stopwords = ps
stopwords = username
stopwords = usernames
stopwords = groupname
stopwords = groupnames
stopwords = stdout
stopwords = stderr

[Git::Remote::Check]            ; before release, check that there are no remote changes
remote_branch = master

[Git::CheckFor::CorrectBranch]  ; before release, check that we are on the correct branch
:version = 0.004
release_branch = master
release_branch = stable

[Git::Check]                    ; before release, check that there are no uncommitted changes
allow_dirty =

[Git::Commit]                   ; after release, commits the edits made to the Changes file
allow-dirty = Changes
commit_msg = %N-%v%t%n%n%c

[Git::Tag]                      ; after release, tags this release
tag_message = v%v%t

[Git::Push]                     ; after release, pushes to the remote repository

[InstallRelease]                ; after release, installs what we just released
install_command = cpanm .

[Clean]                         ; after release, does 'dzil clean'
